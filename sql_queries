-- STEP 1: SELECT DATABASE

USE hospital;
SET SQL_SAFE_UPDATES = 0;

-- STEP 2: CLEANING & STANDARDIZATION

-- 2.1 Handle missing ages by filling with the average
UPDATE healthcare 
SET Age = (SELECT AVG(Age) FROM (SELECT * FROM healthcare) AS temp)
WHERE Age IS NULL;

-- 2.2 Replace null values in Gender with 'Unknown'
UPDATE healthcare
SET Gender = 'Unknown'
WHERE Gender IS NULL OR Gender = '';

-- 2.3 Set negative ages to NULL
UPDATE healthcare
SET Age = NULL
WHERE Age < 0;

-- 2.4 Standardize Blood Type entries
UPDATE healthcare
SET `Blood Type` = CASE 
    WHEN `Blood Type` IN ('a+', 'A +', 'A pos', 'a positive') THEN 'A+'
    WHEN `Blood Type` IN ('b+', 'B pos', 'B positive') THEN 'B+'
    WHEN `Blood Type` IN ('o+', 'O pos', 'O positive') THEN 'O+'
    WHEN `Blood Type` IN ('ab+', 'AB pos', 'AB positive') THEN 'AB+'
    ELSE 'Unknown'
END;

-- STEP 3: NULL CHECK

SELECT *
FROM healthcare
WHERE Name IS NULL
   OR Age IS NULL
   OR Gender IS NULL
   OR `Blood Type` IS NULL
   OR `Medical Condition` IS NULL
   OR `Date of Admission` IS NULL
   OR Doctor IS NULL
   OR Hospital IS NULL
   OR `Insurance Provider` IS NULL
   OR `Billing Amount` IS NULL
   OR `Room Number` IS NULL
   OR `Admission Type` IS NULL
   OR `Discharge Date` IS NULL
   OR Medication IS NULL
   OR `Test Results` IS NULL;

-- STEP 4: DATE CLEANING

UPDATE healthcare 
SET Date_of_Admission = STR_TO_DATE(Date_of_Admission, '%d-%m-%Y')
WHERE Date_of_Admission IS NOT NULL;

-- STEP 5: TRIM WHITESPACE

UPDATE healthcare 
SET Name = TRIM(Name),
    Gender = TRIM(Gender),
    `Blood Type` = TRIM(`Blood Type`),
    `Medical Condition` = TRIM(`Medical Condition`),
    Doctor = TRIM(Doctor),
    Hospital = TRIM(Hospital),
    `Insurance Provider` = TRIM(`Insurance Provider`),
    Medication = TRIM(Medication),
    `Test Results` = TRIM(`Test Results`);

-- STEP 6: UPPERCASE TEXT

UPDATE healthcare 
SET Gender = UPPER(Gender),
    `Blood Type` = UPPER(`Blood Type`),
    `Test Results` = UPPER(`Test Results`);

-- STEP 7: FEATURE ENGINEERING

ALTER TABLE healthcare ADD COLUMN Admission_Month VARCHAR(20), ADD COLUMN Admission_Year INT;

UPDATE healthcare
SET Age_Group = CASE 
    WHEN Age < 18 THEN 'Child'
    WHEN Age BETWEEN 18 AND 35 THEN 'Young Adult'
    WHEN Age BETWEEN 36 AND 60 THEN 'Adult'
    ELSE 'Senior'
END;



-- STEP 8: EXPLORATORY DATA ANALYSIS


-- 8.1 View all data
SELECT * FROM healthcare;

-- 8.2 Record count
SELECT COUNT(*) AS Total_Patients FROM healthcare;

-- 8.3 Distinct medical conditions
SELECT DISTINCT `Medical Condition` FROM healthcare;

-- 8.4 Patients by gender
SELECT Gender, COUNT(*) AS Count FROM healthcare GROUP BY Gender;

-- 8.5 Average age
SELECT AVG(Age) AS Average_Age FROM healthcare;

-- 8.6 Patients after 2020
SELECT * FROM healthcare WHERE Date_of_Admission > '2020-01-01';

-- 8.7 Billing per hospital
SELECT Hospital, SUM(`Billing Amount`) AS Total_Billing 
FROM healthcare 
GROUP BY Hospital;

-- 8.8 Count by admission type
SELECT `Admission Type`, COUNT(*) AS Count 
FROM healthcare 
GROUP BY `Admission Type`;

-- 8.9 Top doctor
SELECT Doctor, COUNT(*) AS Patient_Count 
FROM healthcare 
GROUP BY Doctor 
ORDER BY Patient_Count DESC 
LIMIT 1;

-- 8.10 Top room by billing
SELECT `Room Number`, SUM(`Billing Amount`) AS Total_Billing 
FROM healthcare 
GROUP BY `Room Number` 
ORDER BY Total_Billing DESC 
LIMIT 1;




-- STEP 9: ADVANCED ANALYSIS

-- 9.1 Abnormal test results
SELECT * FROM healthcare WHERE `Test Results` = 'ABNORMAL';

-- 9.2 Avg billing by condition
SELECT `Medical Condition`, AVG(`Billing Amount`) AS Average_Billing 
FROM healthcare 
GROUP BY `Medical Condition`;

-- 9.3 Count by blood type
SELECT `Blood Type`, COUNT(*) AS Count FROM healthcare GROUP BY `Blood Type`;

-- 9.4 Top medications
SELECT Medication, COUNT(*) AS Prescription_Count 
FROM healthcare 
GROUP BY Medication 
ORDER BY Prescription_Count DESC 
LIMIT 3;

-- 9.5 Hospital with highest avg billing
SELECT Hospital, AVG(`Billing Amount`) AS Average_Billing 
FROM healthcare 
GROUP BY Hospital 
ORDER BY Average_Billing DESC 
LIMIT 1;

-- 9.6 Billing by insurance
SELECT `Insurance Provider`, SUM(`Billing Amount`) AS Total_Billing 
FROM healthcare 
GROUP BY `Insurance Provider`;

-- 9.7 Doctors with >5 patients
SELECT Doctor, COUNT(*) AS Patient_Count 
FROM healthcare 
GROUP BY Doctor 
HAVING Patient_Count > 5;

-- 9.8 Most common condition
SELECT `Medical Condition`, COUNT(*) AS Frequency 
FROM healthcare 
GROUP BY `Medical Condition` 
ORDER BY Frequency DESC 
LIMIT 1;

-- 9.9 Billing > avg
SELECT * 
FROM healthcare 
WHERE `Billing Amount` > (SELECT AVG(`Billing Amount`) FROM healthcare);

-- 9.10 Top 5 hospitals
SELECT Hospital, COUNT(*) AS Patient_Count 
FROM healthcare 
GROUP BY Hospital 
ORDER BY Patient_Count DESC 
LIMIT 5;

-- STEP 10: STATISTICS & AGGREGATIONS

-- 10.1 Gender %
SELECT Gender, (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM healthcare)) AS Percentage 
FROM healthcare 
GROUP BY Gender;

-- 10.2 Unique med/test results
SELECT DISTINCT Medication, `Test Results` FROM healthcare;

-- 10.3 Same condition & med
SELECT * 
FROM healthcare h1 
WHERE EXISTS (
    SELECT 1 
    FROM healthcare h2 
    WHERE h1.`Medical Condition` = h2.`Medical Condition` 
      AND h1.Medication = h2.Medication 
      AND h1.ID <> h2.ID
);

-- 10.4 Min/Max Admission Date
SELECT MIN(`Date of Admission`) AS Earliest_Admission, MAX(`Date of Admission`) AS Latest_Admission 
FROM healthcare;

-- 10.5 Readmitted patients
SELECT Name, COUNT(*) AS Readmissions 
FROM healthcare 
GROUP BY Name 
HAVING Readmissions > 1;

-- 10.6 Doctors with abnormal patients
SELECT DISTINCT Doctor 
FROM healthcare 
WHERE `Test Results` = 'ABNORMAL';

-- 10.7 Avg stay by type
SELECT `Admission Type`, AVG(DATEDIFF(`Discharge Date`, `Date of Admission`)) AS Avg_Stay_Length 
FROM healthcare 
GROUP BY `Admission Type`;

-- 10.8 Top 10% billing
SELECT * 
FROM healthcare 
WHERE `Billing Amount` >= (
    SELECT MIN(`Billing Amount`)
    FROM (
        SELECT `Billing Amount`, 
               PERCENT_RANK() OVER (ORDER BY `Billing Amount`) AS Percentile
        FROM healthcare
    ) AS Ranked
    WHERE Percentile >= 0.9
);

-- 10.9 Age vs billing (visual data)
SELECT Age, `Billing Amount` 
FROM healthcare 
ORDER BY Age;

-- 10.10 Top 3 conditions by billing
SELECT `Medical Condition`, AVG(`Billing Amount`) AS Avg_Billing 
FROM healthcare 
GROUP BY `Medical Condition` 
ORDER BY Avg_Billing DESC 
LIMIT 3;

-- 10.11 Blood type + Avg Age
SELECT `Blood Type`, COUNT(*) AS Total_Patients, AVG(Age) AS Avg_Age 
FROM healthcare 
GROUP BY `Blood Type`;
